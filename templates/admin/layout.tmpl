<!DOCTYPE html>
<html ng-app="adminApp">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="">
  <meta name="author" content="">
  <title>b</title>

  <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" type="text/css" />
  <link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css" type="text/css" />
  <style type="text/css">
    body { padding-top: 50px; }
    .sub-header { padding-bottom: 10px; border-bottom: 1px solid #eee; }
    .main, .sidebar { padding: 20px; }
    .main .page-header { margin-top: 0; }
    .sidebar .commands { background-color: #eee; padding: 5px; height: 45px; }
    .sidebar .commands a { float: right; }
    .posts-index .new-title .form-control { font-size: 1.5em; height: 1.5em; line-height: 1em; }
    .posts-index .post { font-size: 1.5em; }
    .posts-index .post a { padding-bottom: 5px; padding-top: 5px; padding-left: 25px; text-indent: -15px; }
    .posts-index .post small { color: #aaa; }
    .posts-edit .hidden { display: none; }
    .posts-edit .title .form-control { font-size: 2em; height: 1.5em; line-height: 1em; }
    .posts-edit .content .form-control { font-family: "Courier New"; height: 35em; }
    .alerts { position: fixed; top: 60px; right: 10px; width: 200px; }
    @media (min-width: 768px) {
      .main { padding-right: 40px; padding-left: 40px; }
    }
  </style>
  <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
  <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
    <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
  <![endif]-->
</head>
<body>
  <div class="navbar navbar-inverse navbar-fixed-top" role="navigation" ng-controller="NavBarCtrl">
    <div class="container-fluid">
      <div class="navbar-header">
        <button type="button" class="navbar-toggle" ng-click="isCollapsed = !isCollapsed">
          <span class="sr-only">Toggle navigation</span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="#">b</a>
      </div>
      <div class="navbar-collapse" collapse="isCollapsed">
        <ul class="nav navbar-nav">
          <li><a href="/admin">Dashboard</a></li>
          <li><a href="/admin/posts">Posts</a></li>
          <!-- <li><a href="/admin/statistics">Statistics</a></li> -->
          <li><a href="/admin/deploy">Deploy</a></li>
        </ul>
        <ul class="nav navbar-nav navbar-right">
          <li><a href="/">Site</a></li>
          <!-- <li><a href="#">Settings</a></li> -->
          <li><a href="https://github.com/slogsdon/b">Help</a></li>
        </ul>
        <form class="navbar-form navbar-right">
          <input type="text" class="form-control" placeholder="Search...">
        </form>
      </div>
    </div>
  </div>

  <div class="container-fluid">
    <div class="row">
      <!-- Render the current template here -->
      {{ yield }}
    </div>
    <div class="alerts" ng-controller="AlertCtrl">
      <alert ng-repeat="alert in alerts" type="alert.type" close="closeAlert($index)">[[ alert.msg ]]</alert>
    </div>
  </div>  
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.15/angular.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.15/angular-resource.js"></script>
  <script src="//cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.10.0/ui-bootstrap.min.js"></script>
  <script src="//cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.10.0/ui-bootstrap-tpls.min.js"></script>
  <script>
    /**
     * angular-slugify -- provides slugification for AngularJS
     *
     * Copyright © 2013 Paul Smith <paulsmith@pobox.com>
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the “Software”), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE.
     */
    "use strict";(function(){function n(e){if(!e)return"";var n=[];var r,i;for(var s=0;s<e.length;s++){if((i=e.charCodeAt(s))<384){r=String.fromCharCode(i);n.push(t[r]||r)}}e=n.join("");e=e.replace(/[^\w\s-]/g,"").trim().toLowerCase();return e.replace(/[-\s]+/g,"-")}var e=angular.module("slugifier",[]);var t={" ":" ","¡":"!","¢":"c","£":"lb","¥":"yen","¦":"|","§":"SS","¨":'"',"©":"(c)","ª":"a","«":"<<","¬":"not","­":"-","®":"(R)","°":"^0","±":"+/-","²":"^2","³":"^3","´":"'","µ":"u","¶":"P","·":".","¸":",","¹":"^1","º":"o","»":">>","¼":" 1/4 ","½":" 1/2 ","¾":" 3/4 ","¿":"?","À":"`A","Á":"'A","Â":"^A","Ã":"~A","Ä":'"A',"Å":"A","Æ":"AE","Ç":"C","È":"`E","É":"'E","Ê":"^E","Ë":'"E',"Ì":"`I","Í":"'I","Î":"^I","Ï":'"I',"Ð":"D","Ñ":"~N","Ò":"`O","Ó":"'O","Ô":"^O","Õ":"~O","Ö":'"O',"×":"x","Ø":"O","Ù":"`U","Ú":"'U","Û":"^U","Ü":'"U',"Ý":"'Y","Þ":"Th","ß":"ss","à":"`a","á":"'a","â":"^a","ã":"~a","ä":'"a',"å":"a","æ":"ae","ç":"c","è":"`e","é":"'e","ê":"^e","ë":'"e',"ì":"`i","í":"'i","î":"^i","ï":'"i',"ð":"d","ñ":"~n","ò":"`o","ó":"'o","ô":"^o","õ":"~o","ö":'"o',"÷":":","ø":"o","ù":"`u","ú":"'u","û":"^u","ü":'"u',"ý":"'y","þ":"th","ÿ":'"y',"Ā":"A","ā":"a","Ă":"A","ă":"a","Ą":"A","ą":"a","Ć":"'C","ć":"'c","Ĉ":"^C","ĉ":"^c","Ċ":"C","ċ":"c","Č":"C","č":"c","Ď":"D","ď":"d","Đ":"D","đ":"d","Ē":"E","ē":"e","Ĕ":"E","ĕ":"e","Ė":"E","ė":"e","Ę":"E","ę":"e","Ě":"E","ě":"e","Ĝ":"^G","ĝ":"^g","Ğ":"G","ğ":"g","Ġ":"G","ġ":"g","Ģ":"G","ģ":"g","Ĥ":"^H","ĥ":"^h","Ħ":"H","ħ":"h","Ĩ":"~I","ĩ":"~i","Ī":"I","ī":"i","Ĭ":"I","ĭ":"i","Į":"I","į":"i","İ":"I","ı":"i","Ĳ":"IJ","ĳ":"ij","Ĵ":"^J","ĵ":"^j","Ķ":"K","ķ":"k","Ĺ":"L","ĺ":"l","Ļ":"L","ļ":"l","Ľ":"L","ľ":"l","Ŀ":"L","ŀ":"l","Ł":"L","ł":"l","Ń":"'N","ń":"'n","Ņ":"N","ņ":"n","Ň":"N","ň":"n","ŉ":"'n","Ō":"O","ō":"o","Ŏ":"O","ŏ":"o","Ő":'"O',"ő":'"o',"Œ":"OE","œ":"oe","Ŕ":"'R","ŕ":"'r","Ŗ":"R","ŗ":"r","Ř":"R","ř":"r","Ś":"'S","ś":"'s","Ŝ":"^S","ŝ":"^s","Ş":"S","ş":"s","Š":"S","š":"s","Ţ":"T","ţ":"t","Ť":"T","ť":"t","Ŧ":"T","ŧ":"t","Ũ":"~U","ũ":"~u","Ū":"U","ū":"u","Ŭ":"U","ŭ":"u","Ů":"U","ů":"u","Ű":'"U',"ű":'"u',"Ų":"U","ų":"u","Ŵ":"^W","ŵ":"^w","Ŷ":"^Y","ŷ":"^y","Ÿ":'"Y',"Ź":"'Z","ź":"'z","Ż":"Z","ż":"z","Ž":"Z","ž":"z","ſ":"s"};e.factory("Slug",function(){return{slugify:n}});e.directive("slug",["Slug",function(e){return{restrict:"E",scope:{to:"="},transclude:true,replace:true,template:"<div ng-transclude></div>",link:function(t,n,r){if(!r.from){throw"must set attribute 'from'"}t.$parent.$watch(r.from,function(n){t.to=e.slugify(n)})}}}]);e.filter("slugify",function(e){return function(t){return e.slugify(t)}})})()
  </script>
  <script>
    (function (angular) {
      var adminApp = angular.module('adminApp', ['admin.controllers', 'admin.services'], function($interpolateProvider) {
        $interpolateProvider.startSymbol('[[');
        $interpolateProvider.endSymbol(']]');
      });
      
      /**
       * Directives
       */
      adminApp.directive('ngEnter', function () {
        return function (scope, element, attrs) {
          element.bind('keydown keyup keypress', function (event) {
            if (event.which == 13) {
              scope.$apply(function () {
                scope.$eval(attrs.ngEnter);
              });
            }
          });
        };
      });
    })(angular);
  </script>
  <script>
    (function (angular) {
      /**
       * Services
       */
      var adminServices = angular.module('admin.services', ['ngResource']);

      adminServices.service('Api', ['$resource', function ($resource) {
        this.categories = $resource('/api/categories/:id');
        this.posts = $resource('/api/posts/:id');
      }]);

      adminServices.service('Meta', [function () {
        this.categories = [];
        this.meta_description = '';
        this.slug = '';
        this.feature_image = '';
        this.title = '';
      }]);
    })(angular);
  </script>
  <script>
    (function (angular) {
      /**
       * Controllers
       */
      var adminControllers = angular.module('admin.controllers', ['ui.bootstrap', 'slugifier']);

      // NavBarCtrl
      // used on all pages to allow for dropdowns
      adminControllers.controller('NavBarCtrl', ['$scope', '$modal', 'Meta', function ($scope, $modal, Meta) {
        $scope.isCollapsed = true;
      }]);

      // AlertCtrl
      // used on all pages to provide toast-style alerts
      adminControllers.controller('AlertCtrl', ['$scope', '$rootScope', '$timeout', function ($scope, $rootScope, $timeout) {
        $scope.alerts = [];

        $scope.addAlert = function (alert) {
          $scope.alerts.push(alert);
          $timeout(function () {
            var i = $scope.alerts.indexOf(alert);
            $scope.closeAlert(i);
          }, 3000);
        };

        $scope.closeAlert = function (index) {
          $scope.alerts.splice(index, 1);
        };

        $rootScope.$on('alert', function (event, alert) {
          $scope.addAlert(alert);
        });
      }]);

      // PostsIndexCtrl
      adminControllers.controller('PostsIndexCtrl', ['$scope', 'Api', function ($scope, Api) {
        Api.posts.query(function (results) {
          $scope.posts = results.sort($scope.sortByPubDate);
        });

        $scope.sortByPubDate = function (a, b) {
          if (a.published_at > b.published_at)
            return -1;
          else if (a.published_at < b.published_at)
            return 1;
          else
            return 0;
        };
      }]);

      // PostsEditCtrl
      adminControllers.controller('PostsEditCtrl', ['$scope', '$rootScope', '$filter', 'Api', 'Meta', function ($scope, $rootScope, $filter, Api, Meta) {
        angular.element(document).ready(function () {
          var categories = $scope.post.categories.replace('[','').replace(']', '').replace(' ', '-'),
              filename = $scope.post.filename;

          $scope.post = Api.posts.get({id: categories + '_' + filename}, function () {
            $scope.original_post = angular.copy($scope.post);
            $scope.post.categories = categories;
            $scope.setMeta(Meta, $scope.post);
          });
        });

        $scope.dateOptions = {
          'year-format': "'yy'",
          'starting-day': 1
        };
        $scope.opened = false;
        $scope.state = {};

        // angular.forEach(['created_at', 'updated_at', 'published_at'], function (v) {
        //   $scope.$watch('post.' + v, function() {
        //     $scope.post[v] = $filter('date')($scope.post[v], "yyyy-MM-ddTHH:mm:ss'Z'");
        //   });
        // });

        $scope.setMeta = function (Meta, post) {
          Meta.categories = angular.copy(post.head_matter.categories);
          Meta.meta_description = angular.copy(post.head_matter.meta_description);
          Meta.slug = angular.copy(post.slug);
          Meta.feature_image = angular.copy(post.head_matter.feature_image);
          Meta.title = angular.copy(post.head_matter.title);
        };

        $scope.toggle = function ($event) {
          $event.preventDefault();
          $event.stopPropagation();

          $scope.opened = !$scope.opened;
        };

        $scope.reset = function ($event) {
          $event.preventDefault();
          $event.stopPropagation();

          var categories = angular.copy($scope.post.categories);
          $scope.post = angular.copy($scope.original_post);
          $scope.post.categories = categories;
          $scope.setMeta(Meta, $scope.original_post);

          $rootScope.$broadcast('alert', {msg:"Post reset!", type:"info"});
        };

        $scope.submit = function ($event) {
          $event.preventDefault();
          $event.stopPropagation();

          console.log(Meta);

          $scope.post.head_matter.categories = angular.copy(Meta.categories);
          $scope.post.head_matter.meta_description = angular.copy(Meta.meta_description);
          $scope.post.slug = angular.copy(Meta.slug);
          $scope.post.head_matter.feature_image = angular.copy(Meta.feature_image);
          $scope.post.head_matter.title = angular.copy(Meta.title);

          $scope.post.$save()
            .then(function(res)  { 
              $rootScope.$broadcast('alert', {msg:"Post saved!", type:"success"}); 
            })
            .catch(function(req) { 
              $rootScope.$broadcast('alert', {msg:"Failed to save post!", type:"error"}); 
            });
        };
      }]);

      // PostsEditCommandsCtrl
      adminControllers.controller('PostsEditCommandsCtrl', ['$scope', function ($scope) {

      }]);

      // CategoriesCtrl
      adminControllers.controller('PostsEditCategoriesCtrl', ['$scope', 'Meta', function ($scope, Meta) {
        $scope.categories = Meta.categories;

        $scope.close = function () {
          $modalInstance.dismiss('cancel');
        };

        $scope.addCategory = function (new_category) {
          if (new_category === '' || typeof new_category === 'undefined')
            return;
          if ($scope.categories.indexOf(new_category) !== -1)
            return;

          $scope.categories.push(angular.copy(new_category));
        };
      }]);

      // DatesCtrl
      adminControllers.controller('PostsEditDatesCtrl', ['$scope', 'Meta', function ($scope, Meta) {
        $scope.created_at = Meta.created_at;

        console.log(Meta);
        $scope.close = function () {
          $modalInstance.dismiss('cancel');
        };
      }]);

      // SeoCtrl
      adminControllers.controller('PostsEditSeoCtrl', ['$scope', 'Slug', 'Meta', function ($scope, Slug, Meta) {
        $scope.slug = Meta.slug;
        $scope.title = Meta.title;
        $scope.meta_description = Meta.meta_description;
        $scope.feature_image = Meta.feature_image;

        $scope.close = function () {
          console.log($scope.meta_description)
          $modalInstance.dismiss('cancel');
        };

        $scope.updateMetaDescription = function (meta_description) {
          if (meta_description === '' || typeof meta_description === 'undefined')
            return;
          console.log(meta_description)
          $scope.meta_description = meta_description;
        };

        $scope.updateFeatureImage = function (feature_image) {
          if (feature_image === '' || typeof feature_image === 'undefined')
            return;

          $scope.feature_image = angular.copy(feature_image);
        };

        $scope.updateSlug = function (slug) {
          if (slug === '' || typeof slug === 'undefined')
            return;

          $scope.slug = angular.copy(slug);
        };

        $scope.suggestSlug = function () {
          $scope.slug = Slug.slugify($scope.title);
        };
      }]);
    })(angular);
  </script>
</body>
</html>